  •  ○  ♦  •  ½  ·  ►  ◄   →  ▄  ▀  ■


►  // mongoose => To use mongo db to store data in a database as NoSql form

►  // dotenv   => npm module to hide secret keys like payment keys so that no other person can access it.

►  // stripe   => For payment services 

►  // uses crypto.js module npm package to encrypt password using Ciphers Algorithm AES

CryptoJS supports AES-128, AES-192, and AES-256. It will pick the variant by the size of the key you pass in. If you use a passphrase, then it will generate a 256-bit key.
• Code: password: CryptoJS.AES.encrypt(                      // encrypting user password
                req.body.password,  
                process.env.PASS_SEC					// using secret password key for encrypting which is stored in .env file
            ).toString()

• 	const hashedPassword = CryptoJS.AES.decrypt(                        	// Decrypting the password corresponding to the username filled and matched with the db
            		user.password,                                                  		// encrypted password saved corresponding to the entered username
            		process.env.PASS_SEC
        	);
        
        const password = hashedPassword.toString(CryptoJS.enc.Utf8);        	// getting password corresponding to the username given from the data base (us username ke corresponding jo password h 									// database me i.e. correct password for that user) 

Note: 	•  With the help of this encryption, we cannot even see the password in the database also.
	•  In db, the password is stored in encrypted form only. 
	•  Hence we can see the password using only secret password key generated by us.
	•  Hence in case of db breach, the password of users are protected.


►  JWT (Json Web Token) :-					// To make the site more secure

•  We are gonna verify our users after login
•  We are gonna provide them a json web token after login process
•  So whenever they try to make a request for updating and deleting any user or product or cart, then we are gonna verify these product , cart, etc belong to that user only or not.
•  Like in Facebook post, it gives the option to delete some post if the post was mine only, else for others post, it does not give the delete or edit option to us.
•  Firstly, the user login using username and password  ( Request from client to the server)							( User   ----------------->  Server )
	Then the server gives back a JWT token as a response to the client.									( User   <-----------------  Server )
	Then whenever user ask for some request like delete, edit, etc,  the client only send a JWT provided by the server earlier			( User   ----------------->  Server )
	Hence the server will verify this JWT token and if that client is the owner then it will authorise those delete, edit, etc, request to the client.		( User   <-----------------  Server )









►  Stripe: (Payment Gateway):

We install react-stripe-checkout npm package using         " npm i react-stripe-checkout  "





Images:

https://assets.stickpng.com/images/58c7f080e665570916c653e6.png
https://assets.stickpng.com/images/580b57fbd9996e24bc43bf28.png
https://assets.stickpng.com/images/589795a7cba9841eabab6137.png
https://assets.stickpng.com/images/58e38d00204d556bbd97b162.png
https://assets.stickpng.com/images/5baa31a3554c7f08176ebff2.png
https://assets.stickpng.com/images/61d4a8b48b51e20004664d4f.png
https://assets.stickpng.com/images/5ba65b08bede2105e7aaeedc.png
https://assets.stickpng.com/images/580b57fbd9996e24bc43bf3c.png




REST API :-  Representational State Transfer
		Relies on client-server protocol HTTP
		We have many different kind of datas present on our database, but by creating a rest api, we are getting 
		those exact useful data wwhich we want from that cluster of data from the database, hence easying our 
		development process.

HTTP Methods:-
	GET : Retreive data from specified source
	POST : Submit data to be processed to a specified resource
	PUT : Update a specified resource
	DELETE : Delete a specified resource


